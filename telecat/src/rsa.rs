use num_bigint::BigUint;

// TODO: This should be in a config file, but there is no config file, so its stored here instead
pub const FINGERPRINT: u64 = 0x97b5df763e13aeff;
pub const MODULUS: [u8; 256] = [
    0xb8, 0x2b, 0x36, 0x77, 0xac, 0x43, 0x5b, 0x4d, 0x7f, 0x7c, 0x99, 0x89, 0x2f, 0x17, 0xbb, 0x88,
    0xde, 0x8d, 0xe5, 0xc0, 0xc0, 0x46, 0xdd, 0xb1, 0xb3, 0x16, 0x4e, 0xf7, 0xf2, 0x33, 0xe7, 0x71,
    0xda, 0x15, 0x9c, 0xaa, 0x60, 0x23, 0xab, 0xdf, 0x93, 0x8b, 0xcd, 0xfe, 0x62, 0x28, 0xc8, 0x40,
    0xf0, 0xee, 0xf6, 0xab, 0x2f, 0x15, 0x35, 0xd5, 0x1f, 0xa0, 0xa6, 0xa4, 0xd4, 0xb7, 0x0d, 0x9c,
    0xfd, 0x1b, 0xb0, 0x89, 0x30, 0xa3, 0x79, 0x87, 0xb2, 0xf5, 0x00, 0x86, 0x62, 0x30, 0x39, 0x35,
    0x7f, 0x8e, 0xba, 0x65, 0xca, 0xd5, 0xf2, 0x5d, 0xc8, 0x69, 0x42, 0xcf, 0x7c, 0x7e, 0x02, 0x38,
    0x4c, 0x75, 0xeb, 0x7b, 0xcd, 0x42, 0xd4, 0xe2, 0x1b, 0xb3, 0x8c, 0x8b, 0xec, 0xa2, 0x5c, 0x6b,
    0xba, 0x63, 0x39, 0xde, 0xba, 0xe7, 0xb1, 0x20, 0x30, 0xe0, 0x2f, 0x67, 0xc9, 0x60, 0x19, 0xb3,
    0x0f, 0x84, 0xc8, 0xa0, 0xdf, 0xea, 0xd5, 0x43, 0x9a, 0x47, 0x24, 0x92, 0xe6, 0xf4, 0x2e, 0x22,
    0xab, 0x5b, 0xba, 0x7e, 0xf3, 0xcb, 0x2f, 0x9b, 0x2a, 0x73, 0xfb, 0x39, 0x4b, 0x34, 0x1c, 0x89,
    0x7a, 0x13, 0xe4, 0x3f, 0x11, 0x1c, 0x1a, 0x48, 0x33, 0xba, 0x7a, 0x91, 0x2d, 0xdc, 0xc8, 0xbb,
    0x9f, 0x2d, 0x33, 0xec, 0x6a, 0xcb, 0x21, 0xfc, 0xb2, 0xaf, 0xe1, 0xb6, 0xd0, 0x26, 0x24, 0x97,
    0xaf, 0x9e, 0xd3, 0x4b, 0xc0, 0xf7, 0x15, 0x19, 0xe9, 0x76, 0xd1, 0xbf, 0x3b, 0x93, 0xca, 0x51,
    0x73, 0xc2, 0x04, 0x3c, 0xae, 0xb1, 0x30, 0xf5, 0x42, 0x9d, 0xe0, 0xd7, 0xff, 0x79, 0xd2, 0xf7,
    0xe3, 0x55, 0xa2, 0x98, 0xfa, 0xfa, 0x39, 0x6b, 0x53, 0x78, 0x4f, 0x94, 0x42, 0xfb, 0xf1, 0xff,
    0x55, 0xd2, 0xba, 0xbe, 0xac, 0x3d, 0x77, 0xe0, 0x2c, 0x7a, 0xe4, 0xa6, 0x14, 0x85, 0x83, 0x27,
];
pub const PRIVATE_EXPONENT: [u8; 256] = [
    0x82, 0x59, 0x4b, 0x6e, 0xbe, 0x44, 0xda, 0x2d, 0x6a, 0xcb, 0x14, 0x9c, 0x4c, 0xf1, 0x7e, 0x31,
    0x2c, 0x5b, 0xc0, 0x3e, 0x81, 0x98, 0x66, 0xb6, 0xab, 0xeb, 0x61, 0x2f, 0x0a, 0x85, 0x04, 0x0d,
    0xc7, 0xee, 0x3d, 0xf9, 0x34, 0x9c, 0x6a, 0xbc, 0x8e, 0x60, 0x88, 0x06, 0xc1, 0x10, 0xde, 0x53,
    0x60, 0x73, 0xb1, 0xb0, 0x8d, 0x5d, 0x74, 0xc1, 0x88, 0x66, 0x1b, 0x2c, 0x54, 0xc5, 0xce, 0xe3,
    0xcb, 0x1d, 0x3b, 0x00, 0x8e, 0xa5, 0x55, 0x91, 0xde, 0xee, 0x9b, 0x55, 0x81, 0xcf, 0x61, 0xde,
    0x64, 0x8e, 0xef, 0x8c, 0xb6, 0x58, 0x60, 0xf7, 0x51, 0xae, 0x76, 0xb4, 0x06, 0x07, 0xe5, 0xa8,
    0x55, 0x2d, 0xac, 0xe2, 0xed, 0xef, 0x9c, 0x5f, 0x00, 0x7e, 0x3f, 0x3e, 0x95, 0xd8, 0x80, 0x93,
    0x5a, 0xd3, 0x7a, 0x15, 0x13, 0xb2, 0x82, 0xe2, 0x26, 0xd5, 0xb5, 0x97, 0xbe, 0xa6, 0xbe, 0xe8,
    0x91, 0xa8, 0x22, 0x94, 0x42, 0x25, 0x7c, 0x5d, 0x34, 0x21, 0xbf, 0x33, 0x68, 0x10, 0x07, 0xaf,
    0xe9, 0x29, 0xd5, 0x7c, 0x8b, 0x63, 0xfb, 0x5b, 0x16, 0xc3, 0xbf, 0x4b, 0x71, 0xe0, 0xf7, 0x3c,
    0x63, 0x35, 0x34, 0xe0, 0x07, 0x50, 0xc8, 0x95, 0x8e, 0xcf, 0x1b, 0x15, 0x9f, 0xd4, 0x11, 0xda,
    0x9f, 0x26, 0x26, 0x6c, 0xe8, 0xd8, 0xb8, 0x7a, 0x05, 0x72, 0xd7, 0xe6, 0xe9, 0xd5, 0xef, 0x61,
    0x55, 0xd9, 0xad, 0x1c, 0x6c, 0x24, 0x37, 0x65, 0x15, 0x56, 0x14, 0xf3, 0xc6, 0x2a, 0xe6, 0xd0,
    0x34, 0x47, 0x1e, 0xca, 0x08, 0x8e, 0x4d, 0x15, 0x62, 0x1c, 0x9a, 0xfa, 0x5e, 0xa6, 0x0a, 0x48,
    0x20, 0xca, 0xe4, 0x3a, 0x4e, 0x17, 0x1c, 0x91, 0x48, 0x2f, 0x9a, 0x3b, 0x24, 0xa0, 0xee, 0xbe,
    0xc9, 0x90, 0x58, 0x51, 0x32, 0x91, 0xd7, 0xd7, 0x17, 0x76, 0x67, 0x28, 0xd7, 0x12, 0xeb, 0x01,
];

pub fn rsa_decrypt(data: &[u8]) -> Vec<u8> {
    let decrypted = BigUint::from_bytes_be(data).modpow(
        &BigUint::from_bytes_be(&PRIVATE_EXPONENT),
        &BigUint::from_bytes_be(&MODULUS),
    );
    decrypted.to_bytes_be()
}
