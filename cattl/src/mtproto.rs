// This is a file generated by cattlc, do not modify unless you know what you are doing.

use core::any::Any;
use crate::tl_object::TlObject;
use crate::tl_object::add_reader;
use crate::bytes_buffer::BytesBuffer;

#[derive(Debug, Default)]
pub struct resPQ {
pub hash: i32,
pub nonce: i128,
pub server_nonce: i128,
pub pq: &'static [u8],
pub server_public_key_fingerprints: Vec<i64>,
}
impl TlObject for resPQ {
    fn hash(&self) -> i32 {
        self.hash
    }
}
pub fn read_raw_resPQ(data: &mut BytesBuffer) -> Option<resPQ> {
let mut obj = resPQ::default();
obj.hash = 85337187;
obj.nonce = data.read_int128()?;
obj.server_nonce = data.read_int128()?;
obj.pq = data.read_bytes()?;
obj.server_public_key_fingerprints = {
    let mut vector_data = vec![];
    let vector_header = data.read_int()?;
    let mut length = 0;
    if vector_header == 0x1cb5c415 {
        length = data.read_int()?;
    } else {
        length = vector_header;
    }

    for _ in 0..length {
        let value = data.read_long()?;
        vector_data.push(value);
    }

    vector_data
};
Some(obj)
}
pub fn read_resPQ(data: &mut BytesBuffer) -> Option<Box<dyn Any>> {
Some(Box::new(read_raw_resPQ(data)?))
}

#[derive(Debug, Default)]
pub struct req_pq_multi {
pub hash: i32,
pub nonce: i128,
}
impl TlObject for req_pq_multi {
    fn hash(&self) -> i32 {
        self.hash
    }
}
pub fn read_raw_req_pq_multi(data: &mut BytesBuffer) -> Option<req_pq_multi> {
let mut obj = req_pq_multi::default();
obj.hash = -1099002127;
obj.nonce = data.read_int128()?;
Some(obj)
}
pub fn read_req_pq_multi(data: &mut BytesBuffer) -> Option<Box<dyn Any>> {
Some(Box::new(read_raw_req_pq_multi(data)?))
}

pub fn init() {
add_reader(85337187, read_resPQ);
add_reader(-1099002127, read_req_pq_multi);
}
